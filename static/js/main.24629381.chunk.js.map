{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Notification.js","components/Section/Section.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","bad","neutral","good","onFeedbackButton","id","className","styles","button","onClick","Notification","message","notification","Section","title","children","section","container","Statistics","total","positivePercentage","statictics__item","App","state","onLeaveFeedback","buttonId","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","totalFeed","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24629381.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statictics__item\":\"Statistics_statictics__item__1DMW8\",\"notification\":\"Statistics_notification__AAgtX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2FBFe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__50f_T\",\"container\":\"Section_container__1Ltva\"};","import styles from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ bad, neutral, good, onFeedbackButton }) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        id=\"good\"\r\n        className={styles.button}\r\n        onClick={() => onFeedbackButton('good')}\r\n      >\r\n        Good\r\n      </button>\r\n      <button\r\n        id=\"neutral\"\r\n        className={styles.button}\r\n        onClick={() => onFeedbackButton('neutral')}\r\n      >\r\n        Neutral\r\n      </button>\r\n      <button\r\n        id=\"bad\"\r\n        className={styles.button}\r\n        onClick={() => onFeedbackButton('bad')}\r\n      >\r\n        Bad\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import styles from './Statistics.module.css';\r\n\r\nconst Notification = ({ message }) => (\r\n  <p className={styles.notification}>{message}</p>\r\n);\r\n\r\nexport default Notification;\r\n","import styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div className={styles.section + ' ' + styles.container}>\r\n    {title && <h2> {title}</h2>}\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Section;\r\n","import styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ bad, neutral, good, total, positivePercentage }) => (\r\n  <div>\r\n    <p className={styles.statictics__item}>Good: {good}</p>\r\n    <p className={styles.statictics__item}>Neutral: {neutral}</p>\r\n    <p className={styles.statictics__item}>Bad: {bad}</p>\r\n    <p className={styles.statictics__item}>Total: {total}</p>\r\n    <p className={styles.statictics__item}>\r\n      Positive feedback: {positivePercentage}%{' '}\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n","import { Component } from 'react';\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\r\nimport Notification from './components/Statistics/Notification';\r\nimport Section from './components/Section/Section';\r\nimport Statistics from './components/Statistics/Statistics';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  onLeaveFeedback = buttonId => {\r\n    if (buttonId === 'good') {\r\n      return this.setState(prevState => {\r\n        return { ...prevState, good: prevState.good + 1 };\r\n      });\r\n    }\r\n\r\n    if (buttonId === 'neutral') {\r\n      return this.setState(prevState => {\r\n        return { ...prevState, neutral: prevState.neutral + 1 };\r\n      });\r\n    }\r\n\r\n    if (buttonId === 'bad') {\r\n      return this.setState(prevState => {\r\n        return { ...prevState, bad: prevState.bad + 1 };\r\n      });\r\n    }\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return good + bad + neutral;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = good + neutral + bad;\r\n    if (total === 0) {\r\n      return 0;\r\n    }\r\n    return Math.round((good / total) * 100);\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const totalFeed = good + neutral + bad;\r\n    //console.log('totalFeed',totalFeed);\r\n    return (\r\n      <div className=\"App\">\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            onFeedbackButton={this.onLeaveFeedback}\r\n          />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          {totalFeed === 0 ? (\r\n            <Notification message=\"No feedback given\" />\r\n          ) : (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}